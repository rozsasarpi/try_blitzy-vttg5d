name: Run Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**/*.py'
      - 'tests/**/*.py'
      - 'pyproject.toml'
      - 'requirements.txt'
      - '.github/workflows/test.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/**/*.py'
      - 'tests/**/*.py'
      - 'pyproject.toml'
      - 'requirements.txt'
      - '.github/workflows/test.yml'
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight UTC
  workflow_dispatch:  # Allow manual triggering

jobs:
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3  # actions/checkout v3
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4  # actions/setup-python v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          cd src/backend
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: Run unit tests
        run: |
          cd src/backend
          python -m pytest tests/ -m 'unit' --cov=. --cov-report=xml:coverage-unit.xml --cov-report=term
      
      - name: Run integration tests
        run: |
          cd src/backend
          python -m pytest tests/ -m 'integration' --cov=. --cov-report=xml:coverage-integration.xml --cov-report=term
      
      - name: Run end-to-end tests
        run: |
          cd src/backend
          python -m pytest tests/ -m 'e2e' --cov=. --cov-report=xml:coverage-e2e.xml --cov-report=term
      
      - name: Generate combined coverage report
        run: |
          cd src/backend
          python -m pytest tests/ --cov=. --cov-report=xml:coverage.xml --cov-report=html:coverage_html
      
      - name: Check coverage threshold
        run: |
          cd src/backend
          python -m pytest tests/ --cov=. --cov-fail-under=90
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v3  # actions/upload-artifact v3
        with:
          name: backend-coverage
          path: src/backend/coverage_html
      
      - name: Generate test report
        if: always()
        run: |
          cd src/backend
          echo '## Backend Test Results' > test-report.md
          echo '### Unit Tests' >> test-report.md
          python -m pytest tests/ -m 'unit' -v >> test-report.md 2>&1 || true
          echo '### Integration Tests' >> test-report.md
          python -m pytest tests/ -m 'integration' -v >> test-report.md 2>&1 || true
          echo '### E2E Tests' >> test-report.md
          python -m pytest tests/ -m 'e2e' -v >> test-report.md 2>&1 || true
      
      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v3  # actions/upload-artifact v3
        with:
          name: backend-test-report
          path: src/backend/test-report.md

  web-test:
    name: Web Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3  # actions/checkout v3
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4  # actions/setup-python v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          cd src/web
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-dash
      
      - name: Run unit tests
        run: |
          cd src/web
          python -m pytest tests/ -m 'unit' --cov=. --cov-report=xml:coverage-unit.xml --cov-report=term
      
      - name: Run component tests
        run: |
          cd src/web
          python -m pytest tests/test_components/ --cov=. --cov-report=xml:coverage-components.xml --cov-report=term
      
      - name: Run integration tests
        run: |
          cd src/web
          python -m pytest tests/test_integration/ --cov=. --cov-report=xml:coverage-integration.xml --cov-report=term
      
      - name: Generate combined coverage report
        run: |
          cd src/web
          python -m pytest tests/ --cov=. --cov-report=xml:coverage.xml --cov-report=html:coverage_html
      
      - name: Check coverage threshold
        run: |
          cd src/web
          python -m pytest tests/ --cov=. --cov-fail-under=80
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v3  # actions/upload-artifact v3
        with:
          name: web-coverage
          path: src/web/coverage_html
      
      - name: Generate test report
        if: always()
        run: |
          cd src/web
          echo '## Web Test Results' > test-report.md
          echo '### Unit Tests' >> test-report.md
          python -m pytest tests/ -m 'unit' -v >> test-report.md 2>&1 || true
          echo '### Component Tests' >> test-report.md
          python -m pytest tests/test_components/ -v >> test-report.md 2>&1 || true
          echo '### Integration Tests' >> test-report.md
          python -m pytest tests/test_integration/ -v >> test-report.md 2>&1 || true
      
      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v3  # actions/upload-artifact v3
        with:
          name: web-test-report
          path: src/web/test-report.md

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [backend-test, web-test]
    if: always()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3  # actions/checkout v3
      
      - name: Create test summary
        run: echo "## Test Results Summary" > test-summary.md
      
      - name: Check backend test status
        run: |
          if [ "${{ needs.backend-test.result }}" == "success" ]; then
            echo "✅ Backend Tests: Passed" >> test-summary.md
          else
            echo "❌ Backend Tests: Failed" >> test-summary.md
          fi
      
      - name: Check web test status
        run: |
          if [ "${{ needs.web-test.result }}" == "success" ]; then
            echo "✅ Web Tests: Passed" >> test-summary.md
          else
            echo "❌ Web Tests: Failed" >> test-summary.md
          fi
      
      - name: Upload test summary
        uses: actions/upload-artifact@v3  # actions/upload-artifact v3
        with:
          name: test-summary
          path: test-summary.md