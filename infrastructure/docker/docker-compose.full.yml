version: '3.8'

services:
  forecasting-service:
    description: Main service for running the forecasting pipeline and API
    build:
      context: ../src/backend
      dockerfile: Dockerfile
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DEBUG=${DEBUG:-False}
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - FORECAST_HORIZON_HOURS=${FORECAST_HORIZON_HOURS:-72}
      - PROBABILISTIC_SAMPLE_COUNT=${PROBABILISTIC_SAMPLE_COUNT:-100}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    env_file:
      - .env
    volumes:
      - forecast-data:/app/data
      - forecast-logs:/app/logs
    ports:
      - "8000:8000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - forecast-network
    command: python -m main api

  scheduler-service:
    description: Service dedicated to running the scheduler for forecast generation
    build:
      context: ../src/backend
      dockerfile: Dockerfile
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DEBUG=${DEBUG:-False}
      - FORECAST_HORIZON_HOURS=${FORECAST_HORIZON_HOURS:-72}
      - PROBABILISTIC_SAMPLE_COUNT=${PROBABILISTIC_SAMPLE_COUNT:-100}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - SCHEDULER_ENABLED=True
      - FORECAST_SCHEDULE_HOUR=${FORECAST_SCHEDULE_HOUR:-7}
      - FORECAST_SCHEDULE_MINUTE=${FORECAST_SCHEDULE_MINUTE:-0}
    env_file:
      - .env
    volumes:
      - forecast-data:/app/data
      - forecast-logs:/app/logs
    restart: unless-stopped
    depends_on:
      forecasting-service:
        condition: service_healthy
    networks:
      - forecast-network
    command: python -m main scheduler

  visualization-service:
    description: Dash-based visualization service for electricity market price forecasts
    build:
      context: ../src/web
      dockerfile: Dockerfile
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DEBUG=${DEBUG:-False}
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8050
      - API_BASE_URL=${API_BASE_URL:-http://forecasting-service:8000/api}
      - DASHBOARD_REFRESH_INTERVAL_SECONDS=${DASHBOARD_REFRESH_INTERVAL_SECONDS:-300}
      - ENABLE_RESPONSIVE_UI=${ENABLE_RESPONSIVE_UI:-True}
      - CACHE_TIMEOUT=${CACHE_TIMEOUT:-3600}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    env_file:
      - .env
    volumes:
      - visualization-cache:/app/cache
      - visualization-logs:/app/logs
    ports:
      - "8050:8050"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8050/", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - forecast-network
    depends_on:
      forecasting-service:
        condition: service_healthy

  prometheus: # prom/prometheus:v2.40.0
    description: Prometheus monitoring service for metrics collection
    image: prom/prometheus:v2.40.0
    volumes:
      - ../monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=${PROMETHEUS_RETENTION_TIME:-15d}"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - monitoring-network
      - forecast-network
    depends_on:
      - forecasting-service
      - scheduler-service
      - visualization-service
      - node-exporter

  grafana: # grafana/grafana:9.3.0
    description: Grafana service for visualization of monitoring metrics
    image: grafana/grafana:9.3.0
    volumes:
      - grafana-data:/var/lib/grafana
      - ../monitoring/grafana/provisioning/:/etc/grafana/provisioning/
      - ../monitoring/grafana/dashboards/:/var/lib/grafana/dashboards/
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_SECURITY_ALLOW_EMBEDDING=${GF_SECURITY_ALLOW_EMBEDDING:-true}
      - GF_USERS_ALLOW_SIGN_UP=${GF_USERS_ALLOW_SIGN_UP:-false}
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - monitoring-network
    depends_on:
      - prometheus

  node-exporter: # prom/node-exporter:v1.4.0
    description: Node exporter for system metrics collection
    image: prom/node-exporter:v1.4.0
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--path.rootfs=/rootfs"
      - "--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)"
    ports:
      - "9100:9100"
    restart: unless-stopped
    networks:
      - monitoring-network

  nginx: # nginx:1.23
    description: Nginx reverse proxy for routing traffic to services
    image: nginx:1.23
    volumes:
      - nginx-config:/etc/nginx/conf.d:ro
    ports:
      - "${NGINX_PORT:-80}:80"
    environment:
      - NGINX_SERVER_NAME=${NGINX_SERVER_NAME:-forecast.example.com}
      - NGINX_CLIENT_MAX_BODY_SIZE=${NGINX_CLIENT_MAX_BODY_SIZE:-10M}
    restart: unless-stopped
    networks:
      - forecast-network
      - monitoring-network
    depends_on:
      - forecasting-service
      - visualization-service
      - prometheus
      - grafana

  nginx-config-generator:
    description: Service that generates the Nginx configuration on startup
    image: busybox:latest
    volumes:
      - nginx-config:/config
    command:
      - sh
      - -c
      - |
        cat > /config/default.conf << 'EOL'
        server {
            listen 80;
            server_name ${NGINX_SERVER_NAME:-forecast.example.com};

            location / {
                proxy_pass http://visualization-service:8050;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            location /api/ {
                proxy_pass http://forecasting-service:8000;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            location /metrics/ {
                proxy_pass http://prometheus:9090/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            location /monitoring/ {
                proxy_pass http://grafana:3000/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            client_max_body_size ${NGINX_CLIENT_MAX_BODY_SIZE:-10M};
        }
        EOL
    restart: on-failure
    environment:
      - NGINX_SERVER_NAME=${NGINX_SERVER_NAME:-forecast.example.com}
      - NGINX_CLIENT_MAX_BODY_SIZE=${NGINX_CLIENT_MAX_BODY_SIZE:-10M}
    env_file:
      - .env

volumes:
  forecast-data:
    description: Persistent storage for forecast dataframes
    driver: local
  forecast-logs:
    description: Persistent storage for forecasting application logs
    driver: local
  visualization-cache:
    description: Persistent storage for visualization cache data
    driver: local
  visualization-logs:
    description: Persistent storage for visualization logs
    driver: local
  prometheus-data:
    description: Persistent storage for Prometheus metrics data
    driver: local
  grafana-data:
    description: Persistent storage for Grafana dashboards and settings
    driver: local
  nginx-config:
    description: Volume for Nginx configuration files
    driver: local

networks:
  forecast-network:
    description: Network for forecast services communication
    driver: bridge
  monitoring-network:
    description: Network for monitoring services communication
    driver: bridge